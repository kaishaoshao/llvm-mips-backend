---
import fs from "node:fs/promises";
import { Code as DefaultCode } from "@astrojs/starlight/components";

const { id,
        beforeContext = 2,
        afterContext = 2,
        collapse = [],
        mark = "unlikely-string",
        noContext = false,
        noIns = false } = Astro.props;

import { getEntry } from "astro:content";
import { readSnippet } from "../util/read-snippet.ts";
import type { MarkerLineOrRange } from "@expressive-code/plugin-text-markers";

const snippet = await getEntry("snippets", id);
if (!snippet) {
    throw new Error(`Snippet with id ${id} not found`);
}
const snippetData = await readSnippet(snippet!.data, beforeContext, afterContext);

// console.log(snippetData);

const before = snippetData.surrounding.before;
const after = snippetData.surrounding.after;

let contextStack = snippetData.contextStack;
let hasAfterContext = contextStack.find((c) => c.type === "AFTER");
////////////// Context manipulation /////////////////////////
// if there is no context, make it empty []
if (contextStack.length === 1) {
    const c = contextStack[0]
    if (c.type === "NONE")
        contextStack = [{text: ">> add at top level in file", type: "NONE"}];
}

if (contextStack.length == 0) {
    if (before === "") {
        contextStack.push({text: ">> new file", type: "FILE"});
    }
}
////////////// End context manipulation /////////////////////////

function stripLeadingComments(content: String) {
    return content.split("\n").map((line) => {
            if (line.trim().startsWith("// ")) {
                return line.slice(3);
            } else if(line.trim().startsWith("# ")) {
                return line.slice(2);
            }
            return line;
        }).join("\n");
}
////////////// Content manipulation ////////////////////
// Construct the actual content with surroundings, remove, and the actual 
// content
let removed = null;
let content = snippetData.snippet;

switch (snippet.data.type) {
    case "commented":
    case "removed":
        // this snippet was removed later, so strip all leading comments
        // in the snippet data in snippetData.snippet
        content = stripLeadingComments(snippetData.snippet)
        break;
    case "add":
        // do nothing
        break;

    case "delete":
        removed = stripLeadingComments(content);
        content = "";
        break;
    default:
        if (snippet.data.type.startsWith("replace=")) {
            const replaceId = snippet.data.type.split("replace=")[1];
            const replacedSnippet = await getEntry("snippets", replaceId);
            if (!replacedSnippet) {
                throw new Error(`Snippet with id "${replaceId}" not found`);
            }
            const replacedSnippetData = await readSnippet(replacedSnippet!.data);
            removed = stripLeadingComments(replacedSnippetData.snippet);
        }
}
const code = `${before}${removed??""}${content}${after}`;
////////////// Content manipulation ////////////////////

const filename = snippetData.filename;

const lang = filename!.split(".").pop();

////////////// Mark and Ins /////////////////////////
// Set the mark and ins
const len = code.trim().split("\n").length;
const removeLen = !removed ? 0
                    : removed.trimEnd().split("\n").length;
const beforeLen = before.trim().length == 0 ? 0
                    : (before.trimStart().split("\n").length) - 1; // trim end because it ends with a \n
const snipLen = snippet.data.end_lineno - snippet.data.start_lineno - 2;
const snipRangeStart = beforeLen + removeLen + 1;
const snipRangeEnd = snipRangeStart + snipLen;
const markRange = `${snipRangeStart}-${snipRangeEnd}`;
if (id === "deleted-mc-init") {
    console.log(markRange)
}

let finalMark = [];
let finalIns: MarkerLineOrRange[] = [];
let finalDels: MarkerLineOrRange[] = [];
if (removed) {
    finalDels = [{ range: `${beforeLen + 1}-${beforeLen + removeLen}` }];
}
if (noIns || snippet.data.type === "mark") {
    // put everything into mark
    finalMark =[{ range: markRange }, mark];
} else if (snippet.data.type === "delete") {
    finalIns = [];
} else {
    finalMark = mark;
    finalIns = [{ range: markRange }];
}
---

<style>
    .code-snippet {
        display: flex;
        flex-direction: column;
        
        gap: 0rem;
        /* padding: 0; */
        * {
            margin: 0 !important;
        }
        .context, .after-context {
            background-color: var(--sl-color-gray-6);
            padding: calc(var(--ec-uiPadBlk) + var(--ec-frm-edActTabIndHt))
                var(--ec-uiPadInl);
            padding-left: calc(var(--ec-uiPadInl) - 0.6rem);
            font-family: var(--ec-codeFontFml);
            font-style: italic;
            font-size: calc(0.97 * var(--ec-codeFontSize));
            /* disable text wrapping to next line */
            white-space: pre-wrap;
            /* overflow: hidden; */
            text-align: left;
        }
        .after-context { 
            display: flex;
            flex-direction: row;
            justify-content: space-between;
            align-items: center;
        }

        @media screen and (max-width: 600px) {
            & .context {
                display: none;
            }
        }
    }
</style>
<div class="code-snippet">
    <!-- for the after context div -->
    {
        !noContext && hasAfterContext &&
        <div class="after-context">
            <span>↓ after {contextStack[0].text}</span><span></span>
        </div>
    }
    <!-- for other contexts -->
    {
        !noContext && contextStack.length > 0  && !hasAfterContext &&
    <div class="context">
    {contextStack.map((context, i) => {
        let prefix = "  ".repeat(i);
        let ctype = context.type;

        if (ctype === "NONE"){
            // return <span></span>
        }
        
        else if (ctype !== "FILE" && i === 0) {
            prefix = "→ "
        }
        else if (i > 0) {
            prefix += "↳ ";
        }
        return (<span>{prefix + context.text}</span><br/>)
    })}</div>
    }
    <DefaultCode
        code={code}
        collapse={collapse}
        collapseStyle={"collapsible-auto"}
        title={filename + `(${id})`}
        lang={"cpp"}
        mark={finalMark}
        ins={finalIns}
        del={finalDels}
    />
</div>
